#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#define ART_PARTITION_FILE "/bin/art-partition.bin"

int check_mac_valid(char *mac_str)
{
    if (strlen(mac_str) != 17)
    {
        return -1;
    }

    char buf[20];
    strcpy(buf, mac_str);
    char *strtmp = strtok(buf, ":");
    int hexnum = 0;
    while (strtmp != NULL)
    {
        if (strlen(strtmp) != 2)
        {
            return -1;
        }
        if ((strtmp[0] >= '0' && strtmp[0] <= '9') || (strtmp[0] >= 'A' && strtmp[0] <= 'F') || (strtmp[0] >= 'a' && strtmp[0] <= 'f'))
        {
            if ((strtmp[1] >= '0' && strtmp[1] <= '9') || (strtmp[1] >= 'A' && strtmp[1] <= 'F') || (strtmp[1] >= 'a' && strtmp[1] <= 'f'))
            {
                hexnum ++;
                strtmp = strtok(NULL, ":");
            }
            else
            {
                return -1;
            }
        }
        else
        {
            return -1;
        }

    }
    if (hexnum != 6)
    {
        return -1;
    }

    return 0;
}

int mac_str_to_array( char *str, unsigned char *mac)
{
    int i;
    char *s, *e;

    if ((mac == NULL) || (str == NULL))
    {
        return -1;
    }

    if (check_mac_valid(str) == -1)
    {
        return -1;
    }

    s = (char *) str;
    for (i = 0; i < 6; ++i)
    {
        mac[i] = s ? strtoul (s, &e, 16) : 0;
        if (s)
           s = (*e) ? e + 1 : e;
    }

    return 0;
}

void mac_array_plus1(unsigned char *mac)
{
	int i;
	for (i=5; i>=0; i--)
	{
		if (mac[i] < 255)
		{
			mac[i]++;
			break;
		}
		else
		{
			mac[i] = 0;
		}
	}
}

int main(int argc, char *argv[])
{
    printf("New lan_mac: %s\n", argv[2]);
    printf("New wan_mac: %s\n", argv[1]);
    printf("New wifi_mac: %s\n", argv[3]);


    

    unsigned char wan_mac[7], lan_mac[7], wifi_mac[7], macInc[18], wifi_mac_test[6], ch;
    int art, count;
    int i, k;

    strcpy(macInc,argv[1]);

    if (mac_str_to_array(macInc, wifi_mac_test) == 0)
    {
        mac_array_plus1(wifi_mac_test);
    }
    

    printf("add +1= %s\n",wifi_mac_test);

    art = open(ART_PARTITION_FILE, O_RDWR);

    if(art < 0)
    {
	perror("open.");
    }

/* Write wan mac address */
    for(k = i = 0; i < 6; i++)
    {
	wan_mac[i] = 0;

	//hight bits
	if( isdigit(argv[2][k]) )
	{	
	    wan_mac[i] += (argv[2][k] - 48) * 16;
	}else if(isupper(argv[2][k]))
	{
	    wan_mac[i] += (argv[2][k] - 55) * 16;
	}else if(islower(argv[2][k]))
	{
	    wan_mac[i] += (argv[2][k] -87) * 16;
	}else
	{
	    printf("address wan_mac error.\n");
	}

	//low bits	
	if( isdigit(argv[2][k+1]) )
	{	
	    wan_mac[i] += argv[2][k+1] - 48;
	}else if(isupper(argv[2][k+1]))
	{
	    wan_mac[i] += argv[2][k+1] - 55;
	}else if(islower(argv[2][k+1]))
	{
	    wan_mac[i] += argv[2][k+1] -87;
	}else
	{
	    printf("address wan_mac error.\n");
	}
	k += 3;
    }

    for(i = 0; i < 6 ; i++)
    {
	write(art, &wan_mac[i], 1);
	printf("%x:", wan_mac[i]);
    }
    printf("\n");

/* write lan mac address */
    for(k = i = 0; i < 6; i++)
    {
	lan_mac[i] = 0;

	//hight bits
	if( isdigit(argv[1][k]) )
	{	
	    lan_mac[i] += (argv[1][k] - 48) * 16;
	}else if(isupper(argv[1][k]))
	{
	    lan_mac[i] += (argv[1][k] - 55) * 16;
	}else if(islower(argv[1][k]))
	{
	    lan_mac[i] += (argv[1][k] -87) * 16;
	}else
	{
	    printf("address wan_mac error.\n");
	}

	//low bits	
	if( isdigit(argv[1][k+1]) )
	{	
	    lan_mac[i] += argv[1][k+1] - 48;
	}else if(isupper(argv[1][k+1]))
	{
	    lan_mac[i] += argv[1][k+1] - 55;
	}else if(islower(argv[1][k+1]))
	{
	    lan_mac[i] += argv[1][k+1] -87;
	}else
	{
	    printf("address wan_mac error.\n");
	}
	k += 3;
    }

    for(i = 0; i < 6 ; i++)
    {
	write(art, &lan_mac[i], 1);
	printf("%x:", lan_mac[i]);
    }
    printf("\n");

/* write wifi mac address */
    for(k = i = 0; i < 6; i++)
    {
	wifi_mac[i] = 0;

	//hight bits
	if( isdigit(argv[3][k]) )
	{	
	    wifi_mac[i] += (argv[3][k] - 48) * 16;
	}else if(isupper(argv[3][k]))
	{
	    wifi_mac[i] += (argv[3][k] - 55) * 16;
	}else if(islower(argv[3][k]))
	{
	    wifi_mac[i] += (argv[3][k] -87) * 16;
	}else
	{
	    printf("address wifi_mac error.\n");
	}

	//low bits	
	if( isdigit(argv[3][k+1]) )
	{	
	    wifi_mac[i] += argv[3][k+1] - 48;
	}else if(isupper(argv[3][k+1]))
	{
	    wifi_mac[i] += argv[3][k+1] - 55;
	}else if(islower(argv[3][k+1]))
	{
	    wifi_mac[i] += argv[3][k+1] -87;
	}else
	{
	    printf("address wifi_mac error.\n");
	}
	k += 3;
    }

    lseek(art, 4098, SEEK_SET);

    for(i = 0; i < 6 ; i++)
    {
	write(art, &wifi_mac[i], 1);
	printf("%x:", wifi_mac[i]);
    }
    printf("\n");
    close(art);
}
